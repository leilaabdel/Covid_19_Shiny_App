install.packages("pacman")
library(pacman)
pacman::p_load(Rserve, ellipse, scatterplot3d, Cairo, randomForest, caTools, e1071, som, impute, pcaMethods, RJSONIO, ROCR, globaltest, GlobalAncova, Rgraphviz, preprocessCore, genefilter, pheatmap, SSPA, sva, Rcpp, pROC, data.table, limma, car, fitdistrplus, lars, Hmisc, magrittr, methods, xtable, pls, caret, lattice, igraph, gplots, KEGGgraph, reshape, RColorBrewer, tibble, siggenes, plotly, xcms, CAMERA, fgsea, MSnbase, BiocParallel, metap, reshape2, scales)
if("devtools" %in% rownames(installed.packages()) == FALSE) {install.packages("devtools",  repos = c(CRAN = "http://cran.rstudio.com"))}
library(devtools)
if("ggplot2" %in% rownames(installed.packages()) == FALSE) {install.packages("ggplot2",  repos = c(CRAN = "http://cran.rstudio.com"))}
if("topOnto" %in% rownames(installed.packages()) == FALSE) {install_github("hxin/topOnto")}
## install RQRLite 0.11.4
if("RSQLite" %in% rownames(installed.packages()) == FALSE) {install.packages('https://cran.r-project.org/src/contrib/Archive/RSQLite/RSQLite_0.11.4.tar.gz', repos=NULL, type='source')}
##install topOnto.LION.db package:
if("topOnto.LION.db" %in% rownames(installed.packages()) == FALSE) {install_github("martijnmolenaar/topOnto.LION2.db/topOnto.LION.db")}
source("https://bioconductor.org/biocLite.R")
biocLite()
if("data.table" %in% rownames(installed.packages()) == FALSE) {install.packages("data.table",  repos = c(CRAN = "http://cran.rstudio.com"))}
if("ggthemes" %in% rownames(installed.packages()) == FALSE) {install.packages("ggthemes",  repos = c(CRAN = "http://cran.rstudio.com"))}
if("httr" %in% rownames(installed.packages()) == FALSE) {install.packages("httr",  repos = c(CRAN = "http://cran.rstudio.com"))}
if("igraph" %in% rownames(installed.packages()) == FALSE) {install.packages("igraph", repos = c(CRAN = "http://cran.rstudio.com"))}
if("shiny" %in% rownames(installed.packages()) == FALSE) {install.packages("shiny",  repos = c(CRAN = "http://cran.rstudio.com"))}
if("shinyBS" %in% rownames(installed.packages()) == FALSE) {install.packages("shinyBS",  repos = c(CRAN = "http://cran.rstudio.com"))}
if("shinythemes" %in% rownames(installed.packages()) == FALSE) {install.packages("shinythemes",  repos = c(CRAN = "http://cran.rstudio.com"))}
if("shinyTree" %in% rownames(installed.packages()) == FALSE) {install.packages("shinyTree",  repos = c(CRAN = "http://cran.rstudio.com"))}
if("shinyWidgets" %in% rownames(installed.packages()) == FALSE) {install.packages("shinyWidgets",  repos = c(CRAN = "http://cran.rstudio.com"))}
if("visNetwork" %in% rownames(installed.packages()) == FALSE) {install.packages("visNetwork",  repos = c(CRAN = "http://cran.rstudio.com"))}
library(data.table)
library(ggplot2)
library(ggthemes)
library(httr)
library(igraph)
library(RSQLite)
library(shiny)
library(shinyBS)
library(shinythemes)
library(shinyTree)
library(shinyWidgets)
library(topOnto)
library('topOnto.LION.db')
library(visNetwork)
runApp("OntologyApp")
library(data.table)
library(ggplot2)
library(ggthemes)
library(httr)
library(igraph)
library(RSQLite)
library(shiny)
library(shinyBS)
library(shinythemes)
library(shinyTree)
library(shinyWidgets)
library(topOnto)
library('topOnto.LION.db')
library(visNetwork)
runApp("OntologyApp")
q()
MyRData <- read.csv("Combined_NMR_IROA_N_v_PXE_No_Unknowns.csv", header = TRUE)
getwd
getwd()
library(readr)
Combined_NMR_IROA_N_v_PXE_No_Unknowns <- read_csv("Desktop/PXE_Leila/Combined_NMR_IROA_N_v_PXE_No_Unknowns.csv")
View(Combined_NMR_IROA_N_v_PXE_No_Unknowns)
library(mixOmics)
help("mixOmics")
Combined_NMR_IROA_N_v_PXE_No_Unknowns <- read.csv("~/Desktop/PXE_Leila/Combined_NMR_IROA_N_v_PXE_No_Unknowns.csv")
View(Combined_NMR_IROA_N_v_PXE_No_Unknowns)
data(Combined_NMR_IROA_N_v_PXE_No_Unknowns)
X <- Combined_NMR_IROA_N_v_PXE_No_Unknowns$X
X <- Combined_NMR_IROA_N_v_PXE_No_Unknowns$
)
clc
q()
Combined_NMR_IROA_N_v_PXE_No_Unknowns <- read.csv("~/Desktop/PXE_Leila/Combined_NMR_IROA_N_v_PXE_No_Unknowns.csv", row.names=1)
View(Combined_NMR_IROA_N_v_PXE_No_Unknowns)
dat <- read.csv("~/Desktop/PXE_Leila/Combined_NMR_IROA_N_v_PXE_No_Unknowns.csv", row.names=1)
Combined_NMR_IROA_N_v_PXE_No_Unknowns <- read.csv("~/Desktop/PXE_Leila/Combined_NMR_IROA_N_v_PXE_No_Unknowns.csv")
View(Combined_NMR_IROA_N_v_PXE_No_Unknowns)
help("data.frame")
Combined_NMR_IROA_N_v_PXE_No_Unknowns <- read.csv("~/Desktop/PXE_Leila/Combined_NMR_IROA_N_v_PXE_No_Unknowns.csv", row.names=1)
View(Combined_NMR_IROA_N_v_PXE_No_Unknowns)
Combined_NMR_IROA_N_v_PXE_No_Unknowns_For_R <- read.csv("~/Desktop/PXE_Leila/Combined_NMR_IROA_N_v_PXE_No_Unknowns_For_R.csv", row.names=1)
View(Combined_NMR_IROA_N_v_PXE_No_Unknowns_For_R)
library(mixOmics)
mSet<-InitDataObjects("conc", "stat", FALSE)
library(readr)
X_v_C_for_Volcano_Plot <- read_csv("Desktop/PXE_Leila/X v C for Volcano Plot.csv")
View(X_v_C_for_Volcano_Plot)
library(readr)
X_v_C_for_Volcano_Plot <- read_csv("Desktop/PXE_Leila/X v C for Volcano Plot.csv")
View(X_v_C_for_Volcano_Plot)
head(X_v_C_for_Volcano_Plot
# Make a basic volcano plot
with(X_v_C_for_Volcano_Plot, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
# Add colored points: red if padj<0.05, orange of log2FC>1, green if both)
with(subset(X_v_C_for_Volcano_Plot, padj<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
with(subset(X_v_C_for_Volcano_Plot, abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="orange"))
with(subset(X_v_C_for_Volcano_Plot, padj<.05 & abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="green"))
with(subset(X_v_C_for_Volcano_Plot, padj<.05 & abs(log2FoldChange)>1), textxy(log2FoldChange, -log10(p value), labs=Gene, cex=.8))
clear
clc
clear console
(q)
R
library (calibrate)
install.packages("calibrate")
# Download the data from github (click the "raw" button, save as a text file called "X_v_C_for_Volcano_Plotults.txt").
# https://gist.github.com/stephenturner/806e31fce55a8b7175af
X_v_C_for_Volcano_Plot <- read.table("X_v_C_for_Volcano_Plot.csv", header=TRUE)
head(X_v_C_for_Volcano_Plot)
# Download the data from github (click the "raw" button, save as a text file called "X_v_C_for_Volcano_Plotults.txt").
# https://gist.github.com/stephenturner/806e31fce55a8b7175af
X_v_C_for_Volcano_Plot <- read.table("X v C for Volcano Plot.csv", header=TRUE)
head(X_v_C_for_Volcano_Plot)
q()
# Make a basic volcano plot
with(X_v_C_for_Volcano_Plot, plot(log2FoldChange, -log10(p value), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
# Add colored points: red if padj<0.05, orange of log2FC>1, green if both)
with(subset(X_v_C_for_Volcano_Plot, padj<.05 ), points(log2FoldChange, -log10(p value), pch=20, col="red"))
with(subset(X_v_C_for_Volcano_Plot, abs(log2FoldChange)>1), points(log2FoldChange, -log10(p value), pch=20, col="orange"))
with(subset(X_v_C_for_Volcano_Plot, padj<.05 & abs(log2FoldChange)>1), points(log2FoldChange, -log10(p value), pch=20, col="green"))
# Label points with the textxy function from the calibrate plot
library(calibrate)
with(subset(X_v_C_for_Volcano_Plot, padj<.05 & abs(log2FoldChange)>1), textxy(log2FoldChange, -log10(p value), labs=Gene, cex=.8))
library(readr)
X_v_C_for_Volcano_Plot <- read_csv("Desktop/PXE_Leila/X v C for Volcano Plot.csv")
View(X_v_C_for_Volcano_Plot)
# Make a basic volcano plot
with(X_v_C_for_Volcano_Plot, plot(log2FoldChange, -log10(p Value), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
# Add colored points: red if padj<0.05, orange of log2FC>1, green if both)
with(subset(X_v_C_for_Volcano_Plot, padj<.05 ), points(log2FoldChange, -log10(p Value), pch=20, col="red"))
with(subset(X_v_C_for_Volcano_Plot, abs(log2FoldChange)>1), points(log2FoldChange, -log10(p Value), pch=20, col="orange"))
with(subset(X_v_C_for_Volcano_Plot, padj<.05 & abs(log2FoldChange)>1), points(log2FoldChange, -log10(p Value), pch=20, col="green"))
# Label points with the textxy function from the calibrate plot
library(calibrate)
with(subset(X_v_C_for_Volcano_Plot, padj<.05 & abs(log2FoldChange)>1), textxy(log2FoldChange, -log10(p Value), labs=Gene, cex=.8))
Parsed with column specification:
cols(
Metabolite = col_character(),
log2FoldChange = col_double(),
`p_Value` = col_double(),
padj = col_double()
)
# Make a basic volcano plot
with(X_v_C_for_Volcano_Plot, plot(log2FoldChange, -log10(p_Value), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
res <- read.table("X v C for Volcano Plot.txt", header=TRUE)
res <- read.table("leilaresearch/desktop/PXE_Leila/X v C for Volcano Plot.txt", header=TRUE)
res <- read.table(getwd("X v C for Volcano Plot.txt"), header=TRUE)
getwd()
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
res
res
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
# Add colored points: red if padj<0.05, orange of log2FC>1, green if both)
with(subset(res, padj<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
with(subset(res, abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="orange"))
with(subset(res, padj<.05 & abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="green"))
res
with(subset(res, padj<.05 & abs(log2FoldChange)>1), textxy(log2FoldChange, -log10(pvalue), labs=Gene, cex=.8))
result
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
# Make a basic volcano plot
with(result, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
getwd()
result <- read.table(getwd() + "/desktop/PXE_Leila/X v C for Volcano Plot.txt",  header=TRUE)
result <- read.table( "Users/leilaresearch/desktop/PXE_Leila/X v C for Volcano Plot.txt",  header=TRUE)
result <- read.table( "Users/leilaresearch/X v C for Volcano Plot.txt",  header=TRUE)
result <- read.table( "Users/leilaresearch/Desktop/PXE_Leila/X v C for Volcano Plot.txt",  header=TRUE)
head(result)
# Make a basic volcano plot
with(result, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
result
# Make a basic volcano plot
with(result, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
# Make a basic volcano plot
with(result, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
# Make a basic volcano plot
with(result, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
# Add colored points: red if padj<0.05, orange of log2FC>1, green if both)
with(subset(res, padj<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
result <- read.table( "Users/leilaresultearch/Desktop/PXE_Leila/X v C for Volcano Plot.txt",  header=TRUE)
result <- read.table( "Users/leilaresearch/Desktop/PXE_Leila/X v C for Volcano Plot.txt",  header=TRUE)
getwd()
result
# Make a basic volcano plot
with(resultult, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
load("~/Desktop/PXE_Leila/X v C for Volcano Plot.txt")
load("~/Desktop/PXE_Leila/X v C for Volcano Plot.txt")
load("~/Desktop/PXE_Leila/X v C for Volcano Plot.csv")
library(readr)
X_v_C_for_Volcano_Plot <- read_csv("Desktop/PXE_Leila/X v C for Volcano Plot.csv")
View(X_v_C_for_Volcano_Plot)
X_v_C_for_Volcano_Plot <- read_csv("Desktop/PXE_Leila/X v C for Volcano Plot.csv")
View(X_v_C_for_Volcano_Plot)
# Make a basic volcano plot
with(resultult, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
# Label points with the textxy function from the calibrate plot
library(calibrate)
with(subset(X_v_C_for_Volcano_Plot, padj<.05 & abs(log2FoldChange)>1), textxy(log2FoldChange, -log10(pvalue), labs=Gene, cex=.8))
# Add colored points: red if padj<0.05, orange of log2FC>1, green if both)
with(subset(X_v_C_for_Volcano_Plot, padj<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
View(X_v_C_for_Volcano_Plot)
with(subset(X_v_C_for_Volcano_Plot, padj<.05 & abs(log2FoldChange)>1), textxy(log2FoldChange, -log10(pValue), labs=Gene, cex=.8))
with(subset(X_v_C_for_Volcano_Plot, padj<.05 & abs(log2FoldChange)>1), textxy(log2FoldChange, -log10(pValue), labs=Gene, cex=.8))
View(X_v_C_for_Volcano_Plot)
library(readr)
X_v_C_for_Volcano_Plot <- read_csv("Desktop/PXE_Leila/X v C for Volcano Plot.csv")
View(X_v_C_for_Volcano_Plot)
View(X_v_C_for_Volcano_Plot)
# Make a basic volcano plot
with(X_v_C_for_Volcano_Plot, plot(log2FoldChange, -log10(pValue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
with(subset(X_v_C_for_Volcano_Plot, padj<.05 & abs(log2FoldChange)>1), points(log2FoldChange, -log10(pValue), pch=20, col="green"))
with(subset(X_v_C_for_Volcano_Plot, padj<.05 & abs(log2FoldChange)>1), textxy(log2FoldChange, -log10(pValue), labs=Gene, cex=.8))
# Label points with the textxy function from the calibrate plot
library(calibrate)
with(subset(X_v_C_for_Volcano_Plot, pValue<.05 & abs(log2FoldChange)>1), textxy(log2FoldChange, -log10(pValue), labs=Metabolite, cex=.8))
with(subset(X_v_C_for_Volcano_Plot, abs(log2FoldChange)>1), points(log2FoldChange, -log10(pValue), pch=20, col="orange"))
with(subset(X_v_C_for_Volcano_Plot, pValue<.05 & abs(log2FoldChange)>1), textxy(log2FoldChange, -log10(pValue), labs=Metabolite, cex=.8))
# Add colored points: red if padj<0.05, orange of log2FC>1, green if both)
with(subset(X_v_C_for_Volcano_Plot, pValue<.05 ), points(log2FoldChange, -log10(pValue), pch=20, col="red"))
with(subset(X_v_C_for_Volcano_Plot, pValue<.05 & abs(log2FoldChange)>1), textxy(log2FoldChange, -log10(pValue), labs=Metabolite, cex=.3n))
with(subset(X_v_C_for_Volcano_Plot, pValue<.05 & abs(log2FoldChange)>1), textxy(log2FoldChange, -log10(pValue), labs=Metabolite, cex=.3))
with(subset(X_v_C_for_Volcano_Plot, pValue<.05 & abs(log2FoldChange)>1), textxy(log2FoldChange, -log10(pValue), labs=Metabolite, cex=.3))
q()
with(subset(X_v_C_for_Volcano_Plot, pValue<.05 & abs(log2FoldChange)>1), textxy(log2FoldChange, -log10(pValue), labs=Metabolite, cex=.3))
View(X_v_C_for_Volcano_Plot)
library(readr)
X_v_C_for_Volcano_Plot <- read_csv("Desktop/PXE_Leila/X v C for Volcano Plot.csv")
View(X_v_C_for_Volcano_Plot)
# Make a basic volcano plot
with(X_v_C_for_Volcano_Plot, plot(log2FoldChange, -log10(pValue), pch=20, main="Volcano plot", xlim=c(-2.5,2)))
# Add colored points: red if padj<0.05, orange of log2FC>1, green if both)
with(subset(X_v_C_for_Volcano_Plot, pValue<.05 ), points(log2FoldChange, -log10(pValue), pch=20, col="red"))
with(subset(X_v_C_for_Volcano_Plot, abs(log2FoldChange)>1), points(log2FoldChange, -log10(pValue), pch=20, col="orange"))
with(subset(X_v_C_for_Volcano_Plot, pValue<.05 & abs(log2FoldChange)>1), points(log2FoldChange, -log10(pValue), pch=20, col="green"))
# Label points with the textxy function from the calibrate plot
library(calibrate)
with(subset(X_v_C_for_Volcano_Plot, pValue<.05 & abs(log2FoldChange)>1), textxy(log2FoldChange, -log10(pValue), labs=Metabolite, cex=.3))
# Add colored points: red if padj<0.05, orange of log2FC>1, green if both)
with(subset(X_v_C_for_Volcano_Plot, pValue<.05 ), points(log2FoldChange, -log10(pValue), pch=20, col="red"))
with(subset(X_v_C_for_Volcano_Plot, abs(log2FoldChange)>1), points(log2FoldChange, -log10(pValue), pch=20, col="orange"))
with(subset(X_v_C_for_Volcano_Plot, pValue<.05 & abs(log2FoldChange)>1), points(log2FoldChange, -log10(pValue), pch=20, col="green"))
# Label points with the textxy function from the calibrate plot
library(calibrate)
# Add colored points: red if padj<0.05, orange of log2FC>1, green if both)
with(subset(X_v_C_for_Volcano_Plot, pValue<.05 ), points(log2FoldChange, -log10(pValue), pch=20, col="red"))
with(subset(X_v_C_for_Volcano_Plot, abs(log2FoldChange)>1), points(log2FoldChange, -log10(pValue), pch=20, col="orange"))
with(subset(X_v_C_for_Volcano_Plot, pValue<.05 & abs(log2FoldChange)>1), points(log2FoldChange, -log10(pValue), pch=20, col="green"))
source('~/N v X Volcano Plot.R')
source('~/N v X Volcano Plot.R')
source('~/N v X Volcano Plot.R')
# Make a basic volcano plot
with(X_v_C_for_Volcano_Plot, plot(log2FoldChange, -log10(pValue), pch=20, main="Volcano plot", xlim=c(-4,4)))
source('~/N v X Volcano Plot.R')
source('~/N v X Volcano Plot.R')
source('~/N v X Volcano Plot.R')
# Make a basic volcano plot
with(X_v_C_for_Volcano_Plot, plot(log2FoldChange, -log10(pValue), pch=20, main="Volcano plot", xlim=c(-15,15)))
source('~/N v X Volcano Plot.R')
source('~/N v X Volcano Plot.R')
source('~/N v X Volcano Plot.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
# Make a basic volcano plot
with(X_v_G_for_Volcano_Plot, plot(log2FoldChange, -log10(pValue), pch=20, main="G v X Volcano Plot"))
# Add colored points: red if padj<0.05, orange of log2FC>1, green if both)
with(subset(X_v_G_for_Volcano_Plot, pValue<.05 ), points(log2FoldChange, -log10(pValue), pch=20, col="red"))
source('~/.active-rstudio-document')
library(readr)
library(readr)
library(readr)
library(readr)
library(readr)
library(readr)
library(readr)
library(readr)
source('~/N v X Volcano Plot.R')
source('~/N v X Volcano Plot.R')
source('~/N v X Volcano Plot.R')
source('~/N v X Volcano Plot.R')
source('~/N v X Volcano Plot.R')
source('~/N v X Volcano Plot.R')
source('~/N v X Volcano Plot.R')
source('~/N v X Volcano Plot.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
with(subset(X_v_G_for_Volcano_Plot, padj<.05 & abs(log2FoldChange)>1), textxy(log2FoldChange, -log10(pvalue), labs=Metabolite, cex=.8))
with(subset(X_v_G_for_Volcano_Plot, padj<.05 & abs(log2FoldChange)>1), textxy(log2FoldChange, -log10(pValue), labs=Metabolite, cex=.8))
with(subset(X_v_G_for_Volcano_Plot, padj<.05 & abs(log2FoldChange)>1), textxy(log2FoldChange, -log10(pValue), labs=Metabolite, cex=.4))
source('~/.active-rstudio-document')
with(subset(X_v_G_for_Volcano_Plot, pValue<.05 & abs(log2FoldChange)>1), textxy(log2FoldChange, -log10(pValue), labs=Metabolite, cex=.2))
X_v_G_for_Volcano_Plot <- read_csv("Desktop/PXE_Leila/X v G for Volcano Plot.csv")
View(X_v_G_for_Volcano_Plot)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(X_v_G_for_Volcano_Plot)
View(X_v_G_for_Volcano_Plot)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("shiny")
library(shiny)
setwd("/leilaresearch/github/Covid_19_Shiny_App")
setwd("/github/Covid_19_Shiny_App")
setwd("Downloads")
setwd("github")
setwd("Applications")
setwd("Downloads")
setwd(..)
setwd("..")
setwd("..")
setwd("..")
setwd("github")
setwd("leilaresearch")
setwd("..")
setwd("Users")
setwd("~/github/Covid_19_Shiny_App")
runApp()
View(X_v_C_for_Volcano_Plot)
runApp()
runApp()
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
